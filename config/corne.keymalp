/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

#define DEF 0
#define NUM 1
#define FUN 2

/ {
    keymap {
        compatible = "zmk,keymap";

        default {
            label = "DEF";

            // |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U  |  I  |  O  | P ¨ |
            // |  A  |  S  |  D  |  F  |  G  |   |  H  |  J  |  K  |  L  | Ñ ´ |
            // |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M  | , ; | . : | |/\ |
            //             | GUI | ALT | BSP |   | SPC | TAB | ENT |

            bindings = <
                &mt ESC Q       &kp W           &kp E           &kp R           &kp T           &kp Y           &kp U           &kp I           &kp O           &kp P      
                &kp A           &kp S           &kp D           &mt LSHIFT F    &kp G           &kp H           &mt RSHIFT J    &kp K           &kp L           &kp Ñ      
                &kp Z           &kp X           &kp C           &kp V           &kp B           &kp N           &kp M           &coma_semi      &dot_colon      &slash_bck
                                                &kp LGUI        &kp LALT        &kp BSPACE      &kp SPACE       &kp TAB         &kp ENTER
            >;
        };
        numpad {
            label = "NUM
            // | º ª |  @  |  #  |  {  |  }  |   |  *  |  7  |  8  |  9  | - _ |
            // |  $  | & ¬ | ¡ ! |  (  |  )  |   |  /  |  4  | 5 < | 6 > |  +  |
            // |  %  | ' " | ¿ ? |  [  |  ]  |   |  0  |  1  |  2  | 3 · |  =  |
            //             |     |     |     |   |     |     |     |

            bindings = <
                &kp Q           &kp W           &kp E           &kp R           &kp T           &kp Y           &kp U           &kp I           &kp O           &kp P      
                &kp A           &kp S           &kp D           &mt LSHIFT F    &kp G           &kp H           &mt RSHIFT J    &kp K           &kp L           &kp Ñ      
                &kp Z           &kp X           &kp C           &kp V           &kp B           &kp N           &kp M           &coma_semi      &dot_colon      &kp FSLH   
                                                &kp LGUI        &mo 1           &kp SPACE       &kp RET         &mo 2           &kp RALT
            >;
        };

        function {
            label = "FUN"

            // |     |  F7 |  F8 |  F9 | F10 |   |     |     |     |     |     |
            // |     |  F4 |  F5 |  F6 | F11 |   | LFT | DWN | UP  | RGT |     |
            // |     |  F1 |  F2 |  F3 | F12 |   |     |     |     |     |     |
            //             | GUI | LWR | SPC |   | ENT | RSE | ALT |

            bindings = <
                &kp Q           &kp W           &kp E           &kp R           &kp T           &kp Y           &kp U           &kp I           &kp O           &kp P      
                &kp A           &kp S           &kp D           &mt LSHIFT F    &kp G           &kp H           &mt RSHIFT J    &kp K           &kp L           &kp Ñ      
                &kp Z           &kp X           &kp C           &kp V           &kp B           &kp N           &kp M           &coma_semi      &dot_colon      &kp FSLH   
                                                &kp LGUI        &mo 1           &kp SPACE       &kp RET         &mo 2           &kp RALT
            >;
        };
    };

    behaviors {
        coma_semi: coma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMA_SEMI";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        slash_bck: slash_bck {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_BCK";
            bindings = <&slash_pip>, <&kp BACKSLASH>;
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        slash_pip: slash_pip {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_PIP";
            bindings = <&kp SLASH>, <&kp PIPE>;
            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        N_TILDE_2: n_tilde_2 {
            compatible = "zmk,behavior-mod-morph";
            label = "N_TILDE_2";
            bindings = <&kp TILDE2 &kp n>, <&kp TILDE1>;
            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};