/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define NUMBER 1
#define NAVIGATION 2
#define FUNCTION 3

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
                &mt ESC Q       &kp W           &kp E           &kp R           &kp T           &kp Y           &kp U           &kp I           &kp O           &kp P
                &hm LCTRL A     &kp S           &hm LALT D      &hm LSHFT F     &kp G           &kp H           &hm RSHFT J     &hm RALT K      &kp L           &nalt_tild
                &kp Z           &kp X           &kp C           &kp V           &kp B           &kp N           &kp M           &kp COMMA       &kp DOT         &slash_bck 
                                                &mt LGUI TAB    &mo NAVIGATION  &kp BSPC        &kp SPACE       &mo NUMBER      &mt RGUI ENTER
            >;
        };

        number {
            bindings = <
                &kp GRAVE       &kp AT          &kp HASH        &kp LBRC        &kp RBRC        &kp ASTRK       &kp KP_N7       &kp KP_N8       &kp KP_N9       &kp SLASH
                &kp DOLLAR      &apers_line     &hm LGUI excls  &hm LSHFT LPAR  &kp RPAR        &kp KP_SLASH    &hm RSHFT KP_N4 &kp num_more    &kp num_less    &kp KP_PLUS
                &kp PRCNT       &kp X           &kp C           &kp RA(LBKT)    &kp RA(RBKT)    &kp KP_N0       &kp KP_N1       &kp KP_N2       &kp KP_N3       &slash_bck 
                                                &kp SPACE       &mo FUNCTION    &kp BSPC        &none           &mo NUMBER      &none
            >;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        slash_bck: slash_bck {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_BCK";
            bindings = <&slash_pip>, <&kp RA(N1)>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        slash_pip: slash_pip {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_PIP";
            bindings = <&kp LS(N7)>, <&kp RA(GRAVE)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        nalt_tild: nalt_tild {
            compatible = "zmk,behavior-mod-morph";
            label = "NALT_TILD";
            bindings = <&kp SEMI>, <&kp APOS>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };


        apers_line: apers_line {
            compatible = "zmk,behavior-mod-morph";
            label = "APERS_LINE";
            bindings = <&kp AMPERSAND>, <&kp RA(N6)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        excls: excls {
            compatible = "zmk,behavior-mod-morph";
            label = "EXCLS";
            bindings = <&kp EXCL>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_more: num_more {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_MORE";
            bindings = <&kp KP_N5>, <&kp BSLH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        num_less: num_less {
            compatible = "zmk,behavior-mod-morph";
            label = "NUM_LESS";
            bindings = <&kp KP_N6>, <&kp LS(BSLH)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};